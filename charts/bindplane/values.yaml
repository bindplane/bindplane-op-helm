# -- Whether or not to enable multi account (tenant).
multiAccount: false

backend:
  # -- Backend to use for persistent storage. Available options are `bbolt`, and `postgres`.
  type: bbolt

  bbolt:
    # -- Persistent volume size.
    volumeSize: 10Gi
    # -- The Kubernetes storage class to use for the volumeClaimTemplate. If unset, the volume claim will use the cluster's default storage class.
    storageClass: ""

  postgres:
    # -- Hostname or IP address of the Postgres server.
    host: localhost
    # -- TCP port used to connect to Postgres.
    port: 5432
    # -- Database to use.
    database: ""
    # -- SSL mode to use when connecting to Postgres over TLS. See the [postgres ssl documentation](https://jdbc.postgresql.org/documentation/ssl/) for valid options.
    sslmode: "disable"
    # -- Username to use when connecting to Postgres.
    username: ""
    # -- Password for the username used to connect to Postgres.
    password: ""
    # -- Max number of connections to use when communicating with Postgres.
    maxConnections: 100

# TODO(jsirianni): Support authentication and TLS.
# This is undocumented for now, as Prometheus support has not been released.
prometheus:
  image:
    # -- Image name to be used. Defaults to `ghcr.io/observiq/bindplane-prometheus`. NOTE: The image tag is derived from the BindPlane server tag.
    name: "ghcr.io/observiq/bindplane-prometheus"
  # -- When true, the chart will not deploy Prometheus. Instead, the user should provide a Prometheus instance to use.
  remote: false
  # -- When enabled, the Prometheus measurements backend will be deployed as a sidecar container. This option is only valid when BindPlane is running as a single node statefulset.
  enableSideCar: false
  # -- The Prometheus hostname or IP address used for querying and writing metrics. Defaults to the service name of the Prometheus StatefulSet deployed by this chart.
  host: ""
  # -- The Prometheus TCP port used for querying and writing metrics.
  port: 9090
  # -- Optional Prometheus query path prefix. Useful when overriding the query endpoints when using systems such as Mimir.
  queryPathPrefix: ""
  remoteWrite:
    # -- Optional hostname or IP address of the remote write endpoint. This value overrides the `prometheus.host` for remote write.
    host: ""
    # -- Optional TCP port of the remote write endpoint. This value overrides the `prometheus.port` for remote write.
    port: 9090
    # -- Path of the remote write endpoint. This value should default to `/api/v1/write`.
    path: /api/v1/write
  auth:
    # -- Prometheus authentication. Supported options include `none` and `basic`.
    type: none
    # -- Prometheus basic authentication username.
    username: ""
    # -- Prometheus basic authentication password.
    password: ""
  tls:
    # -- Whether or not to use TLS when connecting to Prometheus.
    enable: false
    # -- Whether or not to skip verification of the Prometheus server's certificate.
    insecure: false
    # The TLS secret should be created like this:
    #
    # kubectl create secret generic prometheus-tls \
    #   --from-file prometheus-client.crt \
    #   --from-file prometheus-client.key \
    #   --from-file ca.crt
    #
    # In this example, the following parameters would be used:
    # prometheus.tls.secret.name: prometheus-tls
    # prometheus.tls.secret.caSubPath: ca.crt
    # prometheus.tls.secret.crtSubPath: prometheus-client.crt (if mutual tls is required)
    # prometheus.tls.secret.keySubPath: prometheus-client.key (if mutual tls is required)
    secret:
      # -- Kubernetes TLS secret name that contains the Prometheus TLS certificate(s).
      name: ""
      # -- The secret's subPath which contains the certificate authority.
      caSubPath: ""
      # -- The secret's subPath which contains the client certificate, required for mutual TLS.
      crtSubPath: ""
      # -- The secret's subPath which contains the client private key, required for mutual TLS.
      keySubPath: ""
  resources:
    requests:
      # -- Memory request.
      memory: 500Mi
      # -- CPU request.
      cpu: 250m
    limits:
      # -- Memory limit.
      memory: 500Mi
      # Disable cpu limit by default, for burstable qos class
      # cpu: 500m
  storage:
    # -- Persistent volume size.
    volumeSize: 10Gi
    # -- The Kubernetes storage class to use for the volumeClaimTemplate. If unset, the volume claim will use the cluster's default storage class.
    storageClass: ""
  # -- Tolerations for the Prometheus pod.
  tolerations: {}
  # -- Optional arbitrary labels to add to the Prometheus pod. This option is only used when Prometheus is running as a StatefulSet managed by the chart (The default mode).
  extraPodLabels: {}


eventbus:
  # The eventbus type to use when BindPlane is deployed with multiple pods (Deployment). Available options include `pubsub`. By default, this option is not required as BindPlane OP operates as a StatefulSet with one pod.
  type: ""

  pubsub:
    # Project ID that should be used for connecting to the Pub/Sub API.
    projectid: ""
    # Pub/Sub topic to use.
    topic: ""
    # Credentials are required when running outside of Google Cloud
    # or when the GKE / GCE instance is not configured with the
    # Pub/Sub oauth scope.
    # Example:
    #   kubectl create secret generic bindplane-pubsub --from-file=credentials.json
    #   credentials:
    #     secret: bindplane-pubsub
    #     subPath: credentials.json
    credentials:
      # -- Optional Kubernetes secret which contains Google Cloud JSON service account credentials. Not required when running within Google Cloud with the Pub/Sub scope enabled.
      secret: ""
      # -- Sub path for the secret which contains the Google Cloud credential JSON
      subPath: ""

  kafka:
    # -- Comma separated list of brokers to use, in the form of `host:port`.
    brokers: ""
    # -- Protocol version of the Kafka brokers in 'MAJOR.MINOR.PATCH' format
    protocolVersion: ""
    # -- Topic to use.
    topic: ""
    auth:
      # -- How to authenticate to Kafka. One of: none|plainText|sasl.
      type: ""
      plain:
        # -- Username to use for plain authentication.
        username: ""
        # -- Password to use for plain authentication.
        password: ""
      sasl:
        # -- Username to use for SASL authentication.
        username: ""
        # -- Password to use for SASL authentication.
        password: ""
        # -- Mechanism for SASL authentication. One of plain|scramSHA256|scramSHA512.
        mechanism: ""
        # -- Version of SASL authentication to use. One of 0|1".
        version: ""
    tls:
      # -- Whether or not to use TLS when connecting to Kafka.
      enable: false
      # -- Whether or not to skip verification of the Kafka broker certificate(s).
      insecure: false
      secret:
        # -- Kubernetes TLS secret name.
        name:
        # -- The secret's subPath which contains the certificate authority.
        caSubPath: ""
        # -- The secret's subPath which contains the certificate for mutual TLS.
        crtSubPath: ""
        # -- The secret's subPath which contains the private key for mutual TLS.
        keySubPath: ""

auth:
  # Supported options:
  # - system (basic auth)
  # - ldap
  # - active-directory
  # 'system' will use the username and password specified
  # in config.secret or config.username / config.password.
  # -- Backend to use for authentication. Available options include `system`, `ldap`, `active-directory`, and `google`.
  type: system

  ldap:
    # -- Protocol to use. Available options include `ldap` (plain text) and `ldaps` (tls).
    protocol: ldap
    # -- Hostname or IP address of the ldap server.
    server: ""
    # -- TCP port to use when connecting to the ldap server. Defaults to `1389` (plain text) or `1636` (tls).
    port:
    # -- Base DN to use when looking up users. Example: `ou=users,dc=stage,dc=net`.
    baseDN: ""
    # -- User to use when looking up users. Example: `cn=admin,dc=stage,dc=net.`
    bindUser: ""
    # -- Password to use for the bind user.
    bindPassword: ""
    # -- Search filter to use when looking up users. Defaults to `(uid=%s)` (ldap) and `(|(sAMAccountName=%[1]v)(userPrincipalName=%[1]v))` (active-directory).
    searchFilter: ""
    tls:
      # -- Whether or not to skip verification of the ldap server's certificate.
      insecure: false
      # Secret name and key which has the ldap server's certificate authority public certificate.
      # You can create the secret with:
      #   kubectl create secret generic ldap-ca --from-file ./ca.crt
      # And use the following values:
      #  ca:
      #    name: ldap-ca
      #    subPath: ca.crt
      ca:
        # -- Name of the Kubernetes secret which contains the ldap server's certificate authority public certificate.
        secret: ""
        # -- The secret's subPath which contains the certificate.
        subPath: ""

  google:
    # -- Google OAUTH clientid
    clientid: ""

image:
  # -- Image name to be used. Defaults to `ghcr.io/observiq/bindplane-ee`.
  name: ""
  # Overrides the image tag whose default is {{ .Chart.AppVersion }}
  # -- Image tag to use. Defaults to the version defined in the Chart's release.
  tag: ""

transform_agent:
  # -- Transform Agent Image name to be used. Defaults to `ghcr.io/observiq/bindplane-transform-agent`.
  name: ""
  # Overrides the image tag whose default is {{ .Chart.AppVersion }}
  # -- Transform Agent Image tag to use. Defaults to latest.
  tag: ""
  # -- Number of replicas to use for the transform agent.
  replicas: 1

# Bindplane configuration options:
# https://github.com/observIQ/bindplane-op/blob/main/docs/configuration.md
config:
  # -- Whether or not to accept the EULA. EULA acceptance is required. See https://observiq.com/legal/eula.
  accept_eula: true

  analytics:
    # -- Whether or not to disable analytics. Disabling analytics is only supported when an enterprise license is used.
    disable: false

  # The URI used by clients to communicate with bindplane-op. Defaults to the
  # clusterIP service. If you wish to communicate with bindplane-op through an ingress
  # service such as ingress-nginx, replace this value with the protocol (http / https), 
  # hostname, path, and port defined in your ingress rule.
  # -- URI used by clients to communicate with BindPlane.
  server_url: ""

  # The URI used by OpAMP clients to communicate with bindplane-op. Defaults to the
  # clusterIP service. If you wish to communicate with bindplane-op through an ingress
  # service such as ingress-nginx, replace this value with the protocol (ws / wss), 
  # hostname, path, and port defined in your ingress rule.
  # -- URI used by agents to communicate with BindPlane using OpAMP.
  # NOTE: This value is not used in BindPlane OP v1.15.0 and newer. 
  # It will eventually be removed when support for older versions of BindPlane is removed from this chart.
  remote_url: ""

  # kubectl -n <namesapce> create secret generic <name> \
  #   --from-literal=username=myuser \
  #   --from-literal=password=mypassword \
  #   --from-literal=secret_key=353753ca-ae48-40f9-9588-28cf86430910 \
  #   --from-literal=sessions_secret=d9425db6-c4ee-4769-9c1f-a66987679e90 \
  #   --from-literal=license=your_license_key
  # -- Name of the Kubernetes secret which contains the `username`, `password`, `secret_key`, `sessions_secret`, and `license` configuration options.
  secret: bindplane

  # The following options override values set in the secret. Useful
  # for quick testing where you do not want to be bothered with managing
  # sensitive values outside of helm.
  # -- Username to use. Overrides `config.secret`.
  username: ""
  # -- Password to use. Overrides `config.secret`.
  password: ""
  # -- Secret Key to use. Overrides `config.secret`.
  secret_key: ""
  # -- Sessions Secret to use. Overrides `config.secret`.
  sessions_secret: ""
  # -- The license key to use for BindPlane OP. Overrides `config.secret`.
  license: ""
  # -- When true, the license key will be referenced from the `config.secret` secret.
  licenseUseSecret: false


# Pod resource requests and limits can be defined here.
# By default, burstable QoS is enabled. Set cpu / memory requests
# and limit to identical values to enable guaranteed qos.
# https://kubernetes.io/docs/tasks/configure-pod-container/quality-service-pod/
resources:
  requests:
    # -- Memory request.
    memory: 1000Mi
    # -- CPU request.
    cpu: 1000m
  limits:
    # -- Memory limit.
    memory: 1000Mi
    # Disable cpu limit by default, for burstable qos class
    # cpu: 1000m

health:
  # -- Full configuration for startupProbe. Supports all options documented here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/.
  startupProbe:
    httpGet:
      path: /health
      port: http
  # -- Full configuration for readinessProbe. Supports all options documented here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/.
  readinessProbe:
    httpGet:
      path: /health
      port: http
  # -- Full configuration for livenessProbe. Supports all options documented here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/.
  livenessProbe:
    httpGet:
      path: /health
      port: http

ingress:
  # -- Whether or not to enable ingress.
  enable: false
  # ingress.host is required when `ingress.enable` is true. This should
  # be a fully qualified hostname.
  # -- Hostname to use when ingress is enabled.
  host:
  # -- Ingress class to use when ingress is enabled.
  class:
  tls:
    # -- Whether or not to enable ingress transport layer security (TLS).
    enable: false
    # -- Name of the Kubernetes secret which contains the TLS certificate. This secret must be created and managed
    # outside of the Helm chart. See the [ingress TLS documentation](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls)
    # for more details.
    secret: ""
  # -- Custom annotations which will be added to the ingress object. Useful for specifying things such as
  # `cert-manager.io/cluster-issuer`.
  annotations: {}

service:
  # -- Custom annotations which will be added to the service object. Useful for specifying things such as `cloud.google.com/backend-config`.
  annotations: {}

trace:
  # -- Trace type to use. Valid options include `otlp`.
  type: ""

  otlp:
    # -- Endpoint of the OTLP trace receiver. Should be in the form of ip:port or host:port.
    endpoint: ""
    # -- Set to `true` to disable TLS. Set to false if TLS is in use by the OTLP trace receiver.
    insecure: false

# -- Number of replicas to use for the BindPlane server. Should not be set if `autoscaling.enable` is set to `true`. 0 means this option will not be set.
replicas: 0

autoscaling:
  # -- Whether or not autoscaling should be enabled. Requires an eventbus to be configured.
  enable: false
  # -- Minimum number of pods when autoscaling is enabled.
  min: 2
  # -- Maximum number of pods when autoscaling is enabled.
  max: 10
  # -- Autoscaling target CPU usage percentage.
  targetCPUUtilizationPercentage: 60
  # -- Autoscaling target Memory usage percentage.
  targetMemoryUtilizationPercentage: 60

email:
  # -- The optional email backend type to use. Valid options include `sendgrid`. Requires an auth type other than `system`.
  type: ""
  sendgrid:
    # -- The sendgrid API token to use when authenticating to Sendgrid.
    token: ""

# -- The Pod spec's securityContext: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod.
podSecurityContext:
  # This field supports all pod securityContext options.
  # BindPlane uses the following container securityContext by default:
  fsGroup: 65534

# -- The Pod's tolerations
tolerations: {}


# -- The Container's securityContext: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container.
containerSecurityContext:
  # This field supports all container securityContext options.
  # BindPlane uses the following container securityContext by default:
  runAsNonRoot: true
  runAsUser: 65534
  # Persistent data is written to a volume, the bindplane process should
  # never need to write to the container filesystem.
  readOnlyRootFilesystem: true
  capabilities:
    drop: ["ALL"]

# Dev options, avoid using them in production.
dev:
  # Avoid enabling this option in production, instead
  # use the Helm flags '--namespace' and '--create-namespace'
  # This namespace is strictly for development using
  # ArgoCD pull request generator. ArgoCD does not support
  # cleaning up namespaces, which can lead to a large
  # number of empty namespaces in a development cluster.
  namespace:
    # Whether or not the namespace should be created.
    create: false
    # The name of the namespace to create. NOTE: This will not deploy
    # resources to the namespace. Helm or ArgoCD will need to be configured
    # to use this namespace.
    name: ""

  # Manages a collector deployment for development purposes.
  collector:
    # Whether or not the collector should be deployed.
    create: false
    image:
      name: ghcr.io/observiq/observiq-otel-collector
      tag: latest
    labels: "configuration=test"
  
  # DEPRECATED: Use the `prometheus` top level section instead.
  # Manages a prometheus deployment for development purposes. Production
  # deployments should use a proper prometheus backend deployed outside
  # of this chart.
  prometheus:
    # Whether or not prometheus should be deployed.
    create: false
    image:
      name: prom/prometheus
      # Generally this should match the version found
      # here https://github.com/observIQ/bindplane-op-enterprise/blob/release/v1.38.0/PROMETHEUS_VERSION
      tag: v2.47.2
  bindplane:
    auth:
      auth0:
        domain: ""
        clientID: ""
        audience: ""


# -- Optional arbitrary volumes to add to the BindPlane pod(s).
extraVolumes: []

# -- Optional arbitrary volume mounts to add to the BindPlane pod(s).
extraVolumeMounts: []

# -- Optional arbitrary labels to add to the BindPlane pod(s).
extraPodLabels: {}

# -- Optional arbitrary environment variables to add to the BindPlane pod(s).
extraEnv: []
